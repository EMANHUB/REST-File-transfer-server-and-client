/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Cliente;

import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.util.ArrayList;
import java.util.Date;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.ws.rs.client.Client;
import javax.ws.rs.client.ClientBuilder;
import javax.ws.rs.client.Entity;
import javax.ws.rs.core.Response;

/**
 *
 * @author Emanuel Rodrigues
 */
public class login extends javax.swing.JFrame {

    private Thread t1, t2, t3, t4;
    private AtualizaTransferencias thread1;
    private AtualizarArvore thread2;
    private AtualizarFicheiros thread3;
    private AtualizarLog thread4;
    static Client client = ClientBuilder.newClient();
    static String baseUri;

    /**
     * Creates new form login
     */
    public login() {
        initComponents();
        this.setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jFileChooser1 = new javax.swing.JFileChooser();
        jFileChooser2 = new javax.swing.JFileChooser();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jTServidor = new javax.swing.JTextField();
        jTPorto = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jFNome = new javax.swing.JTextField();
        bLogin = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jTDir = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Login");

        jLabel1.setText("Servidor");

        jLabel2.setText("Porto");

        jTPorto.setToolTipText("Porto");

        jLabel3.setText("Nome");

        jFNome.setToolTipText("Username");

        bLogin.setText("Login");
        bLogin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bLoginActionPerformed(evt);
            }
        });

        jLabel4.setText("Directoria");

        jButton1.setText("Procurar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(bLogin)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jTDir, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3)
                            .addComponent(jLabel1))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTServidor, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jFNome, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTPorto, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(55, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jTServidor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jTPorto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jFNome, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jButton1)
                    .addComponent(jTDir, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(bLogin)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public void terminarSessao() {
       
        if (t1.isAlive()) {
            thread1.matar();
        }
        /*if (t2.isAlive()) {
            thread2.matar();
        }*/
        if (t3.isAlive()) {
            thread3.matar();
        }
        if (t4.isAlive()) {
            thread4.matar();
        }
    }


    private void bLoginActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bLoginActionPerformed
        // TODO add your handling code here:
        if (verifica_servidor(jTServidor.getText(), jTPorto.getText())) {
            int resultado = addCliente(jFNome.getText(), jTDir.getText());
            if (resultado == -1) {
                JOptionPane.showMessageDialog(this, "Não é uma directoria válida!", "Aviso", JOptionPane.WARNING_MESSAGE);
            } else if (resultado == 1) {
                System.out.println("Cliente com sucesso!");
                Principal p = new Principal(baseUri, jTDir.getText(), client, jFNome.getText(), this);
                JFrame frame = p;
                this.setVisible(false);
                frame.setVisible(true);
                thread1 = new AtualizaTransferencias(p, "http://" + jTServidor.getText() + ":" + jTPorto.getText() + "/Servidor/resources/Transferencias", jFNome.getText(), jTDir.getText(), client);
                t1 = new Thread(thread1);
                t1.start();
                /*
                thread para atualizar as diretorias de 10 em 10 segundos foi desativa relativamente ao requisito ser alterado
                thread2 = new AtualizarArvore(p);
                t2 = new Thread(thread2);
                t2.start();*/
                thread3 = new AtualizarFicheiros(jFNome.getText(), jTDir.getText(), baseUri, client);
                t3 = new Thread(thread3);
                t3.start();
                thread4 = new AtualizarLog(p, baseUri, client);
                t4 = new Thread(thread4);
                t4.start();

            } else {
                JOptionPane.showMessageDialog(this, "Nome já existe!", "Aviso", JOptionPane.WARNING_MESSAGE);
            }
        }

    }//GEN-LAST:event_bLoginActionPerformed

    //ação do botao para lançar o filechooser para escolher a diretoria
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        JFileChooser chooser;
        chooser = new JFileChooser();
        chooser.setCurrentDirectory(new java.io.File(System.getProperty("user.home")));
        chooser.setDialogTitle("Escolha o Ficheiro...");
        chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        chooser.setAcceptAllFileFilterUsed(false);
        if (chooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            jTDir.setText(chooser.getSelectedFile().toString());
            System.out.println(chooser.getSelectedFile());
        } else {
            System.out.println("Nada Selecionado");
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(login.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(login.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(login.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(login.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new login().setVisible(true);

            }
        });
    }
    
    //verificar se o servidor é válido
    public boolean verifica_servidor(String servidor, String porto) {
        try {
           int nPorto = Integer.parseInt(porto);
           if(nPorto<0 || nPorto>65535){
               JOptionPane.showMessageDialog(this, "Porto fora do intervalo válido!", "Aviso", JOptionPane.WARNING_MESSAGE);
           }
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Porto não numerico!", "Aviso", JOptionPane.WARNING_MESSAGE);
            return false;
        }
        baseUri = "http://" + servidor + ":" + porto + "/Servidor/resources/Clientes";
        Response resultado = null;
        try {
            resultado = client.target(baseUri)
                    .request()
                    .get();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Servidor incorreto!", "Erro", JOptionPane.ERROR_MESSAGE);
        }
        if (resultado != null && resultado.getStatus() == 200) {
            return true;
        } else {
            JOptionPane.showMessageDialog(this, "Servidor inválido!", "Erro", JOptionPane.ERROR_MESSAGE);
            return false;
        }
    }
    
    //adicionar o cliente no servidor rest
    public static int addCliente(String nome, String caminho) {
        Cliente Cliente = new Cliente(nome, new Date());
        ArrayList<String> lista = listar_directoria(caminho);
        if (lista == null) {
            return -1;
        }
        Cliente.setFicheiros(listar_directoria(caminho));
        Response resultado = client.target(baseUri)
                .request()
                .post(Entity.xml(Cliente));
        if (resultado.getStatus() == 200) {
            return 1;
        } else {
            return 0;
        }
    }
    
    //método para transformar os ficheiros da diretoria em um arraylist de string com o nome dos ficheiros
    public static ArrayList<String> listar_directoria(String caminho) {
        File f = new File(caminho);
        if (!f.exists() || !f.isDirectory()) {
            return null;
        }
        ArrayList<String> lista = new ArrayList<String>();
        try {
            Files.list(new File(caminho).toPath())
                    .forEach(path -> {
                        File ficheiro = new File(path.toString());
                        if (!ficheiro.isDirectory()) {
                            lista.add(ficheiro.getName());
                        }
                    });
        } catch (IOException ex) {
            System.out.println("Directoria não encontrada");
        }
        return lista;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bLogin;
    private javax.swing.JButton jButton1;
    private javax.swing.JTextField jFNome;
    private javax.swing.JFileChooser jFileChooser1;
    private javax.swing.JFileChooser jFileChooser2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JTextField jTDir;
    private javax.swing.JTextField jTPorto;
    private javax.swing.JTextField jTServidor;
    // End of variables declaration//GEN-END:variables
}
